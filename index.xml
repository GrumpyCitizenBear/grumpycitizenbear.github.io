<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>暴力熊的进阶笔记</title>
    <link>http://grumpycitizenbear.top/</link>
    <description>Recent content on 暴力熊的进阶笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Mon, 29 Jan 2024 21:00:18 +0800</lastBuildDate>
    <atom:link href="http://grumpycitizenbear.top/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1</title>
      <link>http://grumpycitizenbear.top/posts/1/</link>
      <pubDate>Mon, 29 Jan 2024 21:00:18 +0800</pubDate>
      <guid>http://grumpycitizenbear.top/posts/1/</guid>
      <description>测试 </description>
    </item>
    <item>
      <title>HTML常用标签</title>
      <link>http://grumpycitizenbear.top/posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Fri, 26 Nov 2021 15:23:42 +0800</pubDate>
      <guid>http://grumpycitizenbear.top/posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</guid>
      <description>HTML常用标签 MDN官网&#xA;一、所有标签都有的属性 标记 class 格式 style 使元素被编辑 contenteditable 让一个东西看不到 hidden id 在html中是唯一的，可以作为链接锚，通过js或者css改变样式 控制tab键的顺序 tabindex 显示完整内容 title 二、章节标签 标题 h1-h6 章节 section 文章 article 段落 p 头部 header 脚步 footer 主要内容 main 旁支内容 aside 划分 div 三、内容标签 ol+li ul+li dl+dt+dd pre 保留空格回车tab code 代码 hr 分割线 br 换行 a 链接 1.href （1）超链接 （2）href的取值 网址 路径 伪协议（javascript：代码；、mailto：邮箱、tel：电话） id 2.target （1）_blank 在空白页面打开 （2）_self 在当前页面打开 （3）_top 在顶部打开页面 （4）_parent 在父页面打开页面 （5）程序猿的命名 固定窗口xxx（windows的name、iframe的name） 3.download 下载 4.</description>
    </item>
    <item>
      <title>basic steps of web crawler</title>
      <link>http://grumpycitizenbear.top/posts/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%AD%A5%E9%AA%A4/</link>
      <pubDate>Wed, 10 Nov 2021 20:18:12 +0800</pubDate>
      <guid>http://grumpycitizenbear.top/posts/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%AD%A5%E9%AA%A4/</guid>
      <description>网络爬虫的基本步骤 </description>
    </item>
    <item>
      <title>java-multithreading</title>
      <link>http://grumpycitizenbear.top/posts/java-multithreading/</link>
      <pubDate>Wed, 03 Nov 2021 10:23:05 +0800</pubDate>
      <guid>http://grumpycitizenbear.top/posts/java-multithreading/</guid>
      <description>多线程与并发 线程与进程 进程：一个进程包括由操作系统分配的内存空间，包含一个或多个线程。一个进程一直运行，知道所有的非守护线程都结束运行后才结束。&#xA;线程：一条线程指的是进程中一个单一顺序的控制流，一个进程可以并发多个线程，每条线程并行执行不同的任务。一个线程不能独立存在，它必须是进程的一部分。&#xA;为什么需要多线程 cpu的计算速度很快 可以看一下这篇文章《我是一个CPU：这个世界慢！死！了！》&#xA;现在的cpu都是多核的，如果程序只有一个线程，那么cpu永远都在等&amp;hellip;&amp;hellip;&#xA;Java的执行模式是同步/阻塞（block）的 同步、异步：针对客户端。&#xA;同步：客户端请求后等待返回。应用程序执行一个系统调用，在系统调用没有完成，应用程序会一直阻塞。、&#xA;异步：客户端请求发出后，不用等待返回结果，执行下一步动作，当系统调用返回时，通过状态、通知来通知调用者，或通过回调函数处理这个调用。&#xA;阻塞、非阻塞：针对服务器。&#xA;阻塞调用：是指调用结果返回之前，当前线程会被挂起。函数只有在得到结果之后才会返回。&#xA;非阻塞调用：指在不能立刻得到结果之前，该函数不会阻塞当前线程，而会立刻返回。原文链接&#xA;Java默认情况下只有一个线程 处理问题非常自然 但具有严重的性能问题 一个线程的生命周期 新建状态 使用new以及Thread类或其子类创建一个线程对象&#xA;就绪状态 使用start（）方法之后，线程进入就绪状态，等待JVM里的线程调度器的调度。&#xA;运行状态 如果就绪状态的线程获取CPU资源，就可以执run（），此时线程便处于运行状态。&#xA;运行状态下的线程非常复杂，可以变为阻塞状态、就绪状态和死亡状态&#xA;阻塞状态 如果一个线程执行了sleep（睡眠）、suspend（挂起）等方法，失去所占用资源之后，该线程就从运行状态进入阻塞状态。在睡眠时间已到或获得设备资源后可以重新进入就绪状态。可以分为三种：&#xA;等待阻塞：运行状态中的线程执行 wait() 方法，使线程进入到等待阻塞状态。 同步阻塞：线程在获取 synchronized 同步锁失败(因为同步锁被其他线程占用)。 其他阻塞：通过调用线程的 sleep() 或 join() 发出了 I/O 请求时，线程就会进入到阻塞状态。当sleep() 状态超时，join() 等待线程终止或超时，或者 I/O 处理完毕，线程重新转入就绪状态。 死亡状态 一个运行状态的线程完成任务或者其他终止条件发生时，该线程切换到终止状态。&#xA;开启一个新的线程 Thread 线程难的本质原因是你要看着同一份代码，想象不同的人在疯狂地以乱序执行它&#xA;start方法并发执行 start方法来启动线程，真正实现了bai多线程运行，这时无需等待run方法体代码执行完毕而直接继续执行下面的代码。通过调用Thread类的 start()方法来启动一个线程，这时此线程处于就绪（可运行）状态，并没有运行，一旦得到cpu时间片，就开始执行run()方法，这里方法 run()称为线程体，它包含了要执行的这个线程的内容，Run方法运行结束，此线程随即终止。&#xA;每多一个线程就多一个执行流&#xA;⽅法栈(局部变量量)是线程私有的&#xA;静态变量量/类变量量是被所有线程共享的&#xA;线程难的本质原因是：你要看着同⼀份代码，想象不同的人在疯狂地以乱序执行它。 创建线程的三种方法 Runnable class RunnableDemo implements Runnable { private Thread t; private String threadName; RunnableDemo( String name) { threadName = name; System.</description>
    </item>
    <item>
      <title>Collection体系原理</title>
      <link>http://grumpycitizenbear.top/posts/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/</link>
      <pubDate>Thu, 21 Oct 2021 21:29:50 +0800</pubDate>
      <guid>http://grumpycitizenbear.top/posts/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/</guid>
      <description>Collection 体系原理 一、体系简介 1.为什么要有集合？ 数组不能实现动态扩容 数组不便于添加、修改、删除 数组可以储存重复元素 2.Collection接口主要有两种子类型集合：List、Set Collection接口储存一组不唯一，无序的对象 List接口储存一组不唯一，有序（插入顺序）的对象 Set接口储存一组唯一，无序的对象 Map接口储存一组键值对象，提供key和value的映射 二、List 1.ArrayList：本质上就是一个数组 2.动态扩容的实现方式 创建一个更大的空间，把原先所有的元素拷贝过去&#xA;private void grow(int minCapacity) { // overflow-conscious code int oldCapacity = elementData.length; int newCapacity = oldCapacity + (oldCapacity &amp;gt;&amp;gt; 1); if (newCapacity - minCapacity &amp;lt; 0) newCapacity = minCapacity; if (newCapacity - MAX_ARRAY_SIZE &amp;gt; 0) newCapacity = hugeCapacity(minCapacity); // minCapacity is usually close to size, so this is a win: elementData = Arrays.copyOf(elementData, newCapacity); } 三、Set 1.</description>
    </item>
    <item>
      <title>Maven包管理的一些见解和总结</title>
      <link>http://grumpycitizenbear.top/posts/maven%E5%8C%85%E7%AE%A1%E7%90%86%E7%9A%84%E4%B8%80%E4%BA%9B%E8%A7%81%E8%A7%A3%E5%92%8C%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 21 Oct 2021 10:42:06 +0800</pubDate>
      <guid>http://grumpycitizenbear.top/posts/maven%E5%8C%85%E7%AE%A1%E7%90%86%E7%9A%84%E4%B8%80%E4%BA%9B%E8%A7%81%E8%A7%A3%E5%92%8C%E6%80%BB%E7%BB%93/</guid>
      <description>Java的包管理与maven 一、什么是包？ 1.如果要知道什么是包，那么首先要了解一下JVM的工作模式 其实很简单，只需要两步：&#xA;执行一个类的字节码&#xA;假如在这个过程中碰到了新的类，加载它&#xA;1、2步循环执行，直到完成整个程序&#xA;2.同时我们还要知道在哪里可以找到类？ classpath类路径&#xA;类的权限定类名（目录层级）唯一确定了一个类&#xA;3.包就是把许多类放在一起打的压缩包 通常以.jar扩展名结尾，也可以手动改为zip&#xA;4.传递性依赖 通俗的说，就是你的程序依赖的类还依赖了别的类&#xA;产生的问题：&#xA;如果classpath中有重名的类，会优先使用排在前面的类 这样会导致程序在未来的某一天因为改变了classpath而出现bug 引申出包管理➡️&#xA;二、什么是包管理 你要使用一些第三方的类，需要告诉JVM去哪里找&#xA;包管理的本质就是告诉JVM如何找到所需的第三方类库，以及成功解决其中的冲突问题&#xA;三、包管理的发展历史 1.Apache Ant 手动下载jar包，放在一个目录中 写XML配置，指定编译的源代码目录、依赖的jar包、输出目录等 缺点 每个人都要造自己的轮子 第三方类库需要手动下载（如果依赖了10000个。。。。） 没有解决包冲突问题 2.Maven 四、maven包管理 maven远不止包管理工具&#xA;1.maven的仓库 maven的中央仓库 按照一定的约定储存包&#xA;maven的本地仓库 默认位置 ～/.m2&#xA;2.maven的编号 groupid artifactid version maven的包按照约定为所有的包编号，方便检索&#xA;3.maven的传递性依赖自动管理 原则：决不允许出现同名不同版本号的jar包 解决方案：1.选择离项目最近的 2.如果距离相同，选择版本号靠前的 4.会产生包冲突 举个例子 我的项目➡️A➡️B➡️C(2.0.0) 我的项目➡️D➡️C(1.0.0) 我的项目依赖了A，A依赖B，B依赖C的2.0.0版本 我的项目还依赖了D，D依赖了C的1.0.0版本 按照maven的解决方法，优于C（1.0.0）距离我的项目更近，所以会选择使用1.0.0版本的C 带来的问题：A引用的C（2.0.0）中的方法在C（1.0.0）版本中没有，系统就会报错 依赖冲突的信号 AbstractMethodError NoClassDefFoundError ClassNotFoundException LinkageError 5.解决包冲突 查看冲突的方式 在IDEA maven 图形化界面中查看 命令行 mvn dependency:tree 可以重定向到文件中，方便查看 使用过滤器： mvn dependency -Dincludes= IDEA中的插件：maven helper 解决方法 直接在pom.</description>
    </item>
    <item>
      <title>有关getter和setter的用法</title>
      <link>http://grumpycitizenbear.top/posts/%E6%9C%89%E5%85%B3getter%E5%92%8Csetter%E7%9A%84%E7%94%A8%E6%B3%95/</link>
      <pubDate>Thu, 14 Oct 2021 16:42:27 +0800</pubDate>
      <guid>http://grumpycitizenbear.top/posts/%E6%9C%89%E5%85%B3getter%E5%92%8Csetter%E7%9A%84%E7%94%A8%E6%B3%95/</guid>
      <description>有关getter和setter的用法和理解 setter方法 作用：用来设置成员变量，可以在方法里面过滤掉一些不合理的值。&#xA;命名规范：&#xA;必须是对象方法。 返回值类型为void。 方法名必须以set开头，而且后面跟上成员变量名去掉“_”首字母必须大写（可以使用快捷键创立getter和setter）。 必须提供一个参数，参数类型必须与所对应的成员变量的类型一致。 形参名称和成员变量去掉下划线相同。 setter方法的好处&#xA;不让数据暴露在外，保证了数据的安全性。 对设置的数据进行过滤。 getter方法 作用：为调用者返回对象内部的成员变量值。&#xA;命名规范：&#xA;必须是对象方法。 必须有返回值，返回值的类型和成员变量的类型一致。 方法名必须是成员变量去掉下划线。 一定是没有参数的。 getter方法的好处&#xA;可以让我们在使用getter方法获取数据之前,对数据进行加工。 比如双十一活动，我们希望对全线商品的价格在原来的价格基础上打五折，那么我们只要去改成品类的价格的getter方法就可以了，让他返回的值为价格 * 0.5。 getter/setter方法注意 在实际的开发中,不一定set和get方法都会提供,如果内部的成员变量,比如学生的学号或计算出来的数据。这样的数据只允许外界读取，但是不允许修改的情况,则通常只提􏰀供get方法而不􏰀提供set方法 。&#xA;成员变量名的命名以下划线开头,get方法名不需要带下划线。&#xA;成员变量名使用下划线开头有两个好处。&#xA;与get方法的方法名区分开来。 可以和一些其他的局部变量区分开来,下划线开头的变量,通常都是类的成员变量。当我看到以下划线开头变量，那么他一定是成员变量。 </description>
    </item>
    <item>
      <title>简介</title>
      <link>http://grumpycitizenbear.top/posts/my-first-post/</link>
      <pubDate>Thu, 14 Oct 2021 09:42:27 +0800</pubDate>
      <guid>http://grumpycitizenbear.top/posts/my-first-post/</guid>
      <description>这是我的个人博客 介绍一下我 姓名： 赵雄皓 性别： 男 年龄： 21 生日： 2000.03.26 学校： 天津工业大学 爱好： 世间一切的新奇未知 这里将记录我在计算机之路的进阶过程 持续更新中&amp;hellip;&amp;hellip; </description>
    </item>
  </channel>
</rss>
